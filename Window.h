#pragma once
#include <SDL.h>

#include <memory>
#include <unordered_set>

#include "IMapView.h"

/**
 * WindowRenderer implements the IMapView protocol,
 * while being attached to a specific SDL_Renderer.
 *
 * Doesn't assume ownership of that Renderer, and doesn't free it!
 */
class WindowRenderer : public IMapView {
   private:
    SDL_Renderer*& m_attached_renderer;

   public:
    WindowRenderer(SDL_Renderer*& renderer) : m_attached_renderer(renderer) {}
    void before_render() override;
    void render(IMapObject*) override;
    void after_render() override;
};

/**
 * Window represents a main Window
 */
class Window {
   private:
    SDL_Window* m_sdl_window{nullptr};
    SDL_Renderer* m_renderer{nullptr};
    unsigned char m_pressed_keys{0};
    int m_width{-1};
    int m_height{-1};
    bool m_is_running{false};

   public:
    ~Window();

    /**
     * Creates and connects to a SDLWindow and a Renderer
     */
    void init(const char* title = "PROI Auto", int width = 800,
              int height = 600, bool fullscreen = false);

    /**
     * Helper function to load an SDL_Texture from a BMP file.
     *
     * Optional `w` and `h` arguments will be set to the
     * width and height of the laoded texture.
     */
    SDL_Texture* load_texture(const char* file, int* w = nullptr,
                              int* h = nullptr);

    /**
     * Handles all events generated by SDL
     */
    void handleEvents();

    /**
     * Destroys all connections with SDL
     */
    void clean();

    /**
     * Creates a WindowRenderer attached to this Window
     */
    inline std::shared_ptr<IMapView> create_mapview() {
        return std::shared_ptr<IMapView>(new WindowRenderer(m_renderer));
    }

    inline SDL_Renderer* get_renderer() { return m_renderer; }
    inline int get_width() { return m_width; }
    inline int get_height() { return m_height; }
    inline unsigned char const get_pressed_keys() { return m_pressed_keys; }
    inline bool is_running() { return m_is_running; }
};
