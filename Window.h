#pragma once
#include <SDL.h>

#include <unordered_set>

class Window {
   private:
    SDL_Window* m_sdl_window{NULL};
    SDL_Renderer* m_renderer{NULL};
    std::unordered_set<SDL_Keycode> m_pressed_keys{};
    int m_width{-1};
    int m_height{-1};
    bool m_is_running{false};

   public:
    ~Window();

    /**
     * Creates and connects to a SDLWindow and a Renderer
     */
    void init(const char* title = "PROI Auto", int width = 800,
              int height = 600, bool fullscreen = false);

    /**
     * Helper function to load an SDL_Texture from a file
     */
    SDL_Texture* load_texture(const char* file);

    /**
     * Handles all events generated by SDL
     */
    void handleEvents();

    /**
     * Destroys all connections with SDL
     */
    void clean();

    /**
     * Checks whether a key is pressed
     */
    inline bool is_pressed(SDL_Keycode key) {
        return m_pressed_keys.find(key) != m_pressed_keys.end();
    }

    inline SDL_Renderer* get_renderer() { return m_renderer; }
    inline int get_width() { return m_width; }
    inline int get_height() { return m_height; }
    inline bool is_running() { return m_is_running; }
};
