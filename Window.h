#pragma once
#include <SDL.h>

#include <memory>
#include <unordered_set>
#include <vector>

#include "Car.h"
#include "IMapView.h"
#include "IRenderAddon.h"

/**
 * WindowRenderer implements the IMapView protocol,
 * while being attached to a specific SDL_Renderer.
 *
 * Doesn't assume ownership of that Renderer, and doesn't free it!
 */
class WindowRenderer : public IMapView {
   private:
    SDL_Renderer* m_sdl_renderer{nullptr};
    std::vector<IRenderAddon*> m_addons{};

   public:
    bool init(SDL_Window*);
    void before_render() override;
    void render(IMapObject*) override;
    void after_render() override;
    void clean();

    inline SDL_Renderer* get_renderer() { return m_sdl_renderer; }
    inline void add_addon(IRenderAddon* addon) { m_addons.push_back(addon); }
    inline std::vector<IRenderAddon*> const& get_addons() { return m_addons; }
};

/**
 * Window represents a main Window
 */
class Window {
   private:
    SDL_Window* m_sdl_window{nullptr};
    std::shared_ptr<WindowRenderer> m_renderer{nullptr};
    unsigned char m_pressed_keys{0};
    int m_width{-1};
    int m_height{-1};
    bool m_is_running{false};

   public:
    ~Window();

    /**
     * Creates and connects to a SDLWindow and a Renderer
     */
    void init(const char* title = "PROI Auto", int width = 800,
              int height = 600, bool fullscreen = false);

    /**
     * Helper function to load an SDL_Texture from a BMP file.
     *
     * Optional `w` and `h` arguments will be set to the
     * width and height of the laoded texture.
     */
    SDL_Texture* load_texture(const char* file, float* w = nullptr,
                              float* h = nullptr);

    /**
     * Handles all events generated by SDL
     */
    void handleEvents();

    /**
     * Destroys all connections with SDL
     */
    void clean();

    inline std::shared_ptr<WindowRenderer> get_renderer() const {
        return m_renderer;
    }
    inline int get_width() const { return m_width; }
    inline int get_height() const { return m_height; }
    inline unsigned char const get_pressed_keys() { return m_pressed_keys; }
    inline bool is_running() const { return m_is_running; }
};
